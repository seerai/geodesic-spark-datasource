name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set Up SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.HEADLESS_USER_KEY }}

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Setup SBT
      uses: sbt/setup-sbt@v1

    - name: Cache SBT dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.ivy2/cache
          ~/.sbt
          ~/.coursier/cache
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', '**/project/build.properties', '**/project/plugins.sbt') }}
        restore-keys: |
          ${{ runner.os }}-sbt-

    - name: Semantic Version
      id: version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        version_format: "${major}.${minor}.${patch}"
        search_commit_body: true
        user_format_type: "csv"
        bump_each_commit: false

    - name: Create version file
      run: |
        echo "VERSION=${{ steps.version.outputs.version }}" >> $GITHUB_ENV
        echo "Version: ${{ steps.version.outputs.version }}"

    - name: Setup GPG for signing
      run: |
        # Import GPG private key from secrets
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import
        
        # Get the key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-F0-9]*\).*/\1/')
        echo "GPG_KEY_ID=$GPG_KEY_ID" >> $GITHUB_ENV
        
        # Verify key is imported
        echo "Imported GPG keys:"
        gpg --list-secret-keys
        
        # Configure GPG for headless operation
        mkdir -p ~/.gnupg
        chmod 700 ~/.gnupg
        cat > ~/.gnupg/gpg-agent.conf <<EOF
        allow-loopback-pinentry
        pinentry-program /usr/bin/pinentry-loopback
        default-cache-ttl 7200
        max-cache-ttl 7200
        EOF
        
        # Set GPG environment variables for headless operation
        echo "GPG_TTY=\$(tty)" >> $GITHUB_ENV
        export GPG_TTY=$(tty)
        
        # Kill any existing GPG agent and start fresh
        gpgconf --kill gpg-agent || true
        sleep 2
        
        # Start GPG agent with proper configuration
        gpg-agent --daemon --allow-loopback-pinentry || echo "GPG agent already running"
        
        # Test GPG signing with the passphrase
        echo "Testing GPG signing..."
        echo "test" | gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" --detach-sign --armor --output test.sig
        if [ -f test.sig ]; then
          echo "✅ GPG test signing successful"
          rm test.sig
        else
          echo "❌ GPG test signing failed - checking GPG agent status"
          gpg-connect-agent 'keyinfo --list' /bye || echo "GPG agent not responding"
          exit 1
        fi

    - name: Configure Git
      run: |
        git config user.name github-actions
        git config user.email gcp-headless@seerai.space

    - name: Run tests
      run: sbt test

    - name: Build and publish to Maven Central
      env:
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        VERSION: ${{ steps.version.outputs.version }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        GPG_TTY: $(tty)
      run: |
        # Check if Sonatype credentials are set
        if [ -z "$SONATYPE_USERNAME" ]; then
          echo "❌ SONATYPE_USERNAME is not set. Please set up Central Publisher Portal credentials."
          echo "Visit: https://central.sonatype.com/account to generate a token"
          exit 1
        fi
        
        if [ -z "$SONATYPE_PASSWORD" ]; then
          echo "❌ SONATYPE_PASSWORD is not set. Please set up Central Publisher Portal credentials."
          echo "Visit: https://central.sonatype.com/account to generate a token"
          exit 1
        fi
        
        # Set up GPG environment for signing
        export GPG_TTY=$(tty)
        
        # Stage the artifacts (sbt 1.11.0+ built-in Central Portal support)
        echo "Staging signed artifacts..."
        sbt -Dpgp.passphrase="$GPG_PASSPHRASE" -Dgpg.pinentry-mode=loopback publishSigned
        
        # Upload bundle to Central Publisher Portal
        echo "Uploading bundle to Central Publisher Portal..."
        if ! sbt sonaUpload; then
          echo "❌ Bundle upload failed. This could be due to:"
          echo "1. Namespace 'ai.seer' not verified in Central Publisher Portal"
          echo "2. Missing required POM metadata"
          echo "3. Invalid artifact signatures"
          echo ""
          echo "Please check:"
          echo "- Visit https://central.sonatype.com/publishing to see detailed error messages"
          echo "- Verify namespace 'ai.seer' is claimed in your Central Portal account"
          echo "- Check that all required POM fields are present"
          exit 1
        fi
        
        # Automatically release (publish) the bundle
        echo "Publishing to Maven Central..."
        if ! sbt sonaRelease; then
          echo "❌ Bundle release failed"
          echo "The bundle was uploaded successfully but release failed"
          echo "You can manually release it from: https://central.sonatype.com/publishing"
          exit 1
        fi

    - name: Create tag
      id: tag
      if: steps.version.outputs.changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email gcp-headless@seerai.space
        git tag v${{ steps.version.outputs.version }} -m "Beep, Boop. Written by a robot. Beep, Boop."
        git push --tags

    - name: Generate changelog
      id: changelog
      if: steps.version.outputs.changed == 'true'
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s" --no-merges ${LAST_TAG}..HEAD)
        fi
        
        # Create changelog
        CHANGELOG="## Changes in v${{ steps.version.outputs.version }}

        $COMMITS"
        
        # Set output for GitHub release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      if: steps.version.outputs.changed == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Update README badges
      if: steps.version.outputs.changed == 'true'
      run: |
        # Update version in README.md
        sed -i "s/version>.*</version>${{ steps.version.outputs.version }}</g" README.md
        sed -i "s/% \".*\"/% \"${{ steps.version.outputs.version }}\"/g" README.md
        sed -i "s/:.*_2.12/:${{ steps.version.outputs.version }}_2.12/g" README.md
        
        # Commit changes
        git add README.md
        git commit -m "Update version to ${{ steps.version.outputs.version }} in README [skip ci]" || exit 0
        git push origin main

    - name: Notify on success
      if: success()
      run: |
        echo "✅ Successfully released version ${{ steps.version.outputs.version }} to Maven Central"
        echo "📦 Artifact: ai.seer:geodesic-spark-datasource-sedona_2.12:${{ steps.version.outputs.version }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Release failed for version ${{ steps.version.outputs.version }}"
        echo "Check the logs above for details"
